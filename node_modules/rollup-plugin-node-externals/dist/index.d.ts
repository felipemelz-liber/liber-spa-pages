/**
 * A Rollup plugin that automatically declares NodeJS built-in modules
 * and npm dependencies as 'external'.
 *
 * Useful when bundling a NodeJS or an Electron app and you don't want to bundle
 * node/npm modules with your own code but rather require() them at runtime.
 */
import { Plugin } from 'rollup';
export interface ExternalsOptions {
    /**
     * Path/to/your/package.json file (or array of paths).
     * Defaults to all package.json files found in parent directories recursively.
     * Won't got outside of a git repository.
     */
    packagePath?: string | string[];
    /** Mark node built-in modules like `path`, `fs`... as external. Defaults to `true`. */
    builtins?: boolean;
    /** Mark dependencies as external. Defaults to `false`. */
    deps?: boolean;
    /** Mark devDependencies as external. Defaults to `true`. */
    devDeps?: boolean;
    /** Mark peerDependencies as external. Defaults to `true`. */
    peerDeps?: boolean;
    /** Mark optionalDependencies as external. Defaults to `true`. */
    optDeps?: boolean;
    /** Force these deps in the list of externals, regardless of other settings. Defaults to `[]`  */
    include?: string | RegExp | (string | RegExp)[];
    /** Exclude these deps from the list of externals, regardless of other settings. Defaults to `[]`  */
    exclude?: string | RegExp | (string | RegExp)[];
    /** @deprecated Use `exclude` instead. */
    except?: string | RegExp | (string | RegExp)[];
}
/** For backward compatibility. Use `ExternalsOptions` instead. */
export declare type ExternalOptions = ExternalsOptions;
export default function externals(options?: ExternalsOptions): Plugin;
